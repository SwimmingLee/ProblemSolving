def solution(a):
    answer = -1
    # 스타 수열을 어떻게 구하지?
    # DFS 로 숫자를 추출해 가며 스타수열인지 확인
    #  2^500_000 - 시간 내로 풀 수 없다

    # DP로는?
    # 수열의 상태를 어떻게 정의?
    # 123123 => [숫자][원하는 숫자] 500,000^2 == 250_000_000_000 = 250TB
    # Tkq불가

    # 그럼 어떻게 해???
    # 그리디로?
    # 이 그리디도 어려운걸?
    # 숫자 하나에 대해서는 그리디로 쭉쭉 갈 수 있는데 그게 아니면 안되지 않어?

    # 특정 숫자를 검색
    # 그 숫자랑 차이게 있는게 있는지 검사

    # 다른 숫자 - 특정 숫자
    # 특정 숫자 - 다른 숫자
    # 그냥 그리디로 푸는데 먼저 되는거 생각하면 되지 뭐
    # [5,2,3,3,5,3]
    # 2 3 3 5

    # 이게 특정 숫자를 기준으로 하면 되는데 모든 숫자를 탐색하면서 이게 가능할까?
    # 각 숫자들이 모두 다르면 음... N^2 이 생김
    # 숫자들은 모두 훑어보고 2개 이상 있는 숫자들만 탐색하면 되지 않을까? 맞아맞아
    # 이러면 시간복잡도는 N*(N/2) 사실 그래도 O(N^2)임
    # 한 번 돌때 모든 숫자를 다 보면?
    # A[특정숫자] = [다른숫자ok? 특정숫자ok?]
    # 사실 이것도 매번 그 숫자의 갯수만큼 리스트를 돌려줘야함....

    # 근데 있잖아 자기 자신이 나왔고 다른 숫자가 나왔는지는 중복되서 알 수 있는게 너무 많이 있는걸
    # 이거 부분합으로 구하면 아니..............
    # 특정 숫자 위치만 표시하면 그 부분으로 부터 얼마나 떨어졌는지?

    # 이거 아이디어가 미쳤다... 역시!!!
    # 특정 숫자를 배열에만 담으면 그러면 더 쉽게 풀 수 있는 것이다.....
    # 거의 빅오 N에 가깝게 처리할 수 있지... 크으....
    # 이건 빅오를 뭐라고 해야할까? N이라고 하는게 맞는듯 한데
    # 이런거에 대한 빅오 산출 기준이 궁금하다

    return answer
